// Generated by Dagger (https://google.github.io/dagger).
package com.app.delivery.injection;

import com.app.delivery.api.ServiceAPI;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class NetworkModule_ProvidePostApi$app_productionDebugFactory
    implements Factory<ServiceAPI> {
  private final Provider<Retrofit> retrofitProvider;

  public NetworkModule_ProvidePostApi$app_productionDebugFactory(
      Provider<Retrofit> retrofitProvider) {
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public ServiceAPI get() {
    return provideInstance(retrofitProvider);
  }

  public static ServiceAPI provideInstance(Provider<Retrofit> retrofitProvider) {
    return proxyProvidePostApi$app_productionDebug(retrofitProvider.get());
  }

  public static NetworkModule_ProvidePostApi$app_productionDebugFactory create(
      Provider<Retrofit> retrofitProvider) {
    return new NetworkModule_ProvidePostApi$app_productionDebugFactory(retrofitProvider);
  }

  public static ServiceAPI proxyProvidePostApi$app_productionDebug(Retrofit retrofit) {
    return Preconditions.checkNotNull(
        NetworkModule.providePostApi$app_productionDebug(retrofit),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
